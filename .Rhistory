#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
#for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(track.file.location,end=-5))
track.name <- str_split(file.name,"/")
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
#for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(track.file.location,end=-5))
track.name <- str_split(file.name,"/")
(track.name)
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(track.file.location,end=-5))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.name <- str_split(file,"/", simplify = T)
(track.name)
album.directories
file
(track.name)
(file.name <- str_sub(file,end=-5))
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.name <- str_split(file,"/", simplify = T)
(track.name)
track.name <- str_split(file,"-", simplify = T)
(track.name)
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.name <- str_split(file.name,"-", simplify = T)
(track.name)
track.file.location
(file.name <- str_sub(file,end=-5))
noises.in.file[j]
album.directories[i]
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
#for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3]
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
artist.name <- track.split[2]
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
#for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3]
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
artist.name <- track.split[2]
output.file <- paste0("[",artist.name,"]-[",album.name,"]-[",track.name,"].json")
(artist.name <- track.split[2])
(album.name <- album.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[2])
output.file <- paste0("[",artist.name,"]-[",album.name,"]-[",track.name,"].json")
output.file
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[2])
output.file <- paste0("[",artist.name,"]-[",album.name,"]-[",track.name,"].json")
output.file
album.split
j=1
#for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste streaming extractor music.exe the track file and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
#}
#}
output.file
code.to.process
track.file.location
output.file
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
for (j in 1:length(noises)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste0("streaming_extractor_music.exe",track.file.location, output.file)
code.to.process <- c(code.to.process,command_line)
}
}
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste0("streaming_extractor_music.exe",track.file.location, output.file)
code.to.process <- c(code.to.process,command_line)
}
}
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste0("streaming_extractor_music.exe",track.file.location, output.file)
code.to.process <- c(code.to.process,command.line)
}
}
(code.to.process <- c(code.to.process,command.line))
noises.in.file
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
noises.in.file
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
for (i in 1:length(album.directories)){
i=1
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
j=1
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste0("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
}
(code.to.process <- c(code.to.process,command.line))
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
for (i in 1:length(album.directories)){
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
}
(code.to.process <- c(code.to.process,command.line))
(code.to.process <- c(code.to.process,command.line))
(code.to.process <- c(code.to.process,command.line))
(code.to.process <- c(code.to.process,command.line))
(code.to.process <- c(code.to.process,command.line))
(code.to.process <- c(code.to.process,command.line))
(code.to.process <- c(code.to.process,command.line))
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
for (i in 1:length(album.directories)){
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
}
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
#task 1 step 3
(for (i in 1:length(album.directories)){
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
code.to.process <- c()
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
})
(code.to.process)
(code.to.process)
(code.to.process)
(code.to.process)
(code.to.process)
(code.to.process)
#task 1 step 1
#install.packages("stringr")
#library(stringr)
#task 1 step 2
(all.directories <- list.dirs(path="Music", recursive=TRUE))
#task 1 step 3
(num.slashes <- str_count(all.directories, "/"))
(album.directories <- all.directories[num.slashes==2])
length(album.directories)
code.to.process <- c()
#task 1 step 3
for (i in 1:length(album.directories)){
#Find the command required to list all the files in a specific directory and use it to find all files in the current album subdirectory.
(files.in.directory <- list.files(album.directories[i]))
#Use the str count() function to count the number of times .WAV occurs in each file. Use this count to subset all .WAV files from the current album subdirectory from the vector of all files in step (a).
noises.in.file <- files.in.directory[str_count(files.in.directory, ".wav")==1]
(noises.in.file)
#Create an empty vector called code.to.process. We will fill this by completing the following for each track in the current album subdirectory.
for (j in 1:length(noises.in.file)){
#Create an object containing the track file location using the paste() function to paste the current album subdirectory and the current track title together. Add a quotation mark to the beginning and end, and make sure you are careful about spaces.
(file <- noises.in.file[j])
(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current track’s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
}
(code.to.process)
